Widget dialog(double height, double width, BuildContext context) {
    return Container(
      width: width,
      height: height,
      margin: const EdgeInsets.all(20),
      decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(10),
          boxShadow: [
            BoxShadow(
                color: Colors.black12, offset: Offset(-5, -5), blurRadius: 5),
            BoxShadow(
                color: Colors.black12, offset: Offset(5, 5), blurRadius: 5),
          ]),
      child: Stack(
        children: [
          LayoutBuilder(builder: (context, constraint) {
            double height = constraint.maxHeight;
            double width = constraint.maxWidth;
            return Column(
              children: [
                Container(
                  height: height * .25,
                  decoration: const BoxDecoration(
                      color: Colors.green,
                      borderRadius:
                          BorderRadius.vertical(top: Radius.circular(10))),
                ),
                SizedBox(
                  height: height * .75,
                )
              ],
            );
          }),
          LayoutBuilder(builder: (context, constraints) {
            double height = constraints.maxHeight;
            double width = constraints.maxWidth;
            return Column(
              children: [
                Container(
                  height: height * .13,
                  alignment: Alignment(0, 0),
                  child: Text('Request service',
                      style: Theme.of(context).textTheme.headline2!.copyWith(
                          fontWeight: FontWeight.w400,
                          color: Colors.white.withOpacity(.8),
                          fontSize: 21)),
                ),
                Container(
                  height: height * .21,
                  alignment: Alignment(0, 1),
                  child: CircleAvatar(
                    backgroundColor: Colors.red,
                    radius: (height * .21) / 2,
                  ),
                ),
                SizedBox(
                  height: height * .05,
                ),
                SizedBox(
                  height: height * .12,
                  child: btnReqCheckout('Request checkout', context),
                ),
                SizedBox(
                  height: height * .12,
                  child: btnReqWater('Request tap water', context),
                ),
                SizedBox(
                  height: height * .12,
                  child: btnCallWaiter('Call waiter', context),
                ),
                SizedBox(
                  height: height * .05,
                ),
                SizedBox(
                    height: height * .03,
                    child: Divider(
                        color: Colors.black12,
                        endIndent: 1,
                        height: 2,
                        thickness: 2,
                        indent: 1)),
                SizedBox(
                  height: height * .17,
                  child: dialogFooter(context),
                ),
              ],
            );
          })
        ],
      ),
    );
  }

  Widget dialogFooter(BuildContext context,) {
    return LayoutBuilder(builder: (context, constraint) {
      double width = constraint.maxWidth;
      double height = constraint.maxHeight;
      return Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: width * .17,
            height: height,
          ),
          SizedBox(
            height: height * .8,
            width: width * .3,
            child: MaterialButton(
              color: Colors.green,

              onPressed: () {
                Provider.of<FirstPageProvider>(context, listen: false)
                    .cancelClikc(context);
              },
              child: FittedBox(
                child: Text(
                  'Cancel',
                  style: Theme.of(context)
                      .textTheme
                      .headline3!
                      .copyWith(fontSize: 17, color: Colors.white.withOpacity(1)),
                ),
              ),
            ),
          ),
          SizedBox(width: width*.05,),
          SizedBox(
            width: width*.3,
            height: height*.8,
            child: MaterialButton(
              color: Colors.deepPurpleAccent,
              onPressed: (){
                Provider.of<FirstPageProvider>(context, listen: false)
                    .sendClick(context);
              },
              child: FittedBox(
                child: Text('Send',
                    style: Theme.of(context)
                        .textTheme
                        .headline3!
                        .copyWith(fontSize: 17, color: Colors.white)),
              ),
            ),
          ),
          SizedBox(width: width*.17,height: height,),
        ],
      );
    });
  }
  Widget btnReqCheckout(String text, BuildContext context) {
    return GestureDetector(
      onTap: () {
        Provider.of<FirstPageProvider>(context, listen: false).checkoutClick();
      },
      child: Consumer<FirstPageProvider>(builder: (context, value, child) {
        return Container(
          width: double.maxFinite,
          color: value.isCheckedOutClicked
              ? Colors.greenAccent.shade100
              : Colors.white,
          child: Center(
            child: Text(
              '$text',
              style: Theme.of(context).textTheme.headline3!.copyWith(
                    color: Colors.black45,
                    fontSize: 17,
                    fontWeight: FontWeight.w500,
                  ),
            ),
          ),
        );
      }),
    );
  }

  Widget btnReqWater(String text, BuildContext context) {
    return GestureDetector(onTap: () {
      Provider.of<FirstPageProvider>(context, listen: false).tapWaterClick();
    }, child: Consumer<FirstPageProvider>(
      builder:
          (BuildContext context, FirstPageProvider provider, Widget? child) {
        return Container(
          width: double.maxFinite,
          color: provider.isTapWaterClicked
              ? Colors.greenAccent.shade100
              : Colors.white,
          child: Center(
            child: Text('$text',
                style: Theme.of(context).textTheme.headline3!.copyWith(
                      color: Colors.black45,
                      fontSize: 17,
                      fontWeight: FontWeight.w500,
                    )),
          ),
        );
      },
    ));
  }

  Widget btnCallWaiter(String text, BuildContext context) {
    return GestureDetector(
      onTap: () {
        Provider.of<FirstPageProvider>(context, listen: false)
            .callWaiterClick();
      },
      child: Consumer<FirstPageProvider>(
        builder: (context, value, child) {
          return Container(
            width: double.maxFinite,
            color: value.isCallWaiterClicked
                ? Colors.greenAccent.shade100
                : Colors.white,
            child: Center(
              child: Text('$text',
                  style: Theme.of(context).textTheme.headline3!.copyWith(
                        color: Colors.black45,
                        fontSize: 17,
                        fontWeight: FontWeight.w500,
                      )),
            ),
          );
        },
      ),
    );
  }
  
